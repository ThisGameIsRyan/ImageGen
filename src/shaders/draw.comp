#version 430

layout(local_size_x = 16, local_size_y = 16) in;

struct Triangle {
    ivec2 p1;
    ivec2 p2;
    ivec2 p3;
    vec4  color;
};

layout(std430, binding = 0) buffer Triangles {
    Triangle tris[];
};

layout(binding = 0, rgba8) uniform writeonly image2D outImage;

uniform ivec2 imageSize;

void main() {
    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    if (gid.x >= imageSize.x || gid.y >= imageSize.y) return;

    Triangle t = tris[0];

    vec4 finalColor = vec4(0, 0, 0, 1); // background

    // Only check THIS pixel, not all of them
    vec2 p = vec2(gid) + vec2(0.5);

    vec2 p1 = vec2(t.p1), p2 = vec2(t.p2), p3 = vec2(t.p3);
    float area = (p2.x-p1.x)*(p3.y-p1.y) - (p3.x-p1.x)*(p2.y-p1.y);

    float w1 = ((p2.x-p.x)*(p3.y-p.y) - (p3.x-p.x)*(p2.y-p.y)) / area;
    float w2 = ((p3.x-p.x)*(p1.y-p.y) - (p1.x-p.x)*(p3.y-p.y)) / area;
    float w3 = ((p1.x-p.x)*(p2.y-p.y) - (p2.x-p.x)*(p1.y-p.y)) / area;

    if (w1 >= 0.0 && w2 >= 0.0 && w3 >= 0.0) {
        finalColor = t.color;
    }

    imageStore(outImage, gid, finalColor);
}
